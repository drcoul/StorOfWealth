'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * @copyright   2017, Miles Johnson
                                                                                                                                                                                                                                                                   * @license     https://opensource.org/licenses/MIT
                                                                                                                                                                                                                                                                   * 
                                                                                                                                                                                                                                                                   */

var _camelCase = require('lodash/camelCase');

var _camelCase2 = _interopRequireDefault(_camelCase);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _json = require('json5');

var _json2 = _interopRequireDefault(_json);

var _mergeWith = require('lodash/mergeWith');

var _mergeWith2 = _interopRequireDefault(_mergeWith);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _vm = require('vm');

var _vm2 = _interopRequireDefault(_vm);

var _isObject = require('./helpers/isObject');

var _isObject2 = _interopRequireDefault(_isObject);

var _isEmptyObject = require('./helpers/isEmptyObject');

var _isEmptyObject2 = _interopRequireDefault(_isEmptyObject);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MODULE_NAME_PATTERN = /^(@[a-z-]+\/)?[a-z-]+$/;
const PLUGIN_NAME_PATTERN = /^plugin:[a-z-]+$/;

class ConfigLoader {

  constructor(appName) {
    this.parsedFiles = {};

    this.appName = appName;
  }

  handleMerge(target, source) {
    if (Array.isArray(target) && Array.isArray(source)) {
      return Array.from(new Set([...target, ...source]));
    }

    return undefined;
  }

  loadConfig() {
    if ((0, _isEmptyObject2.default)(this.package)) {
      throw new Error('Cannot load configuration as "package.json" has not been loaded.');
    }

    const { appName } = this;
    const camelName = (0, _camelCase2.default)(appName);
    let config = {};

    if (this.package[camelName]) {
      config = this.package[camelName];

      if (typeof config === 'string') {
        config = { extends: config };
      }
    } else {
      const filePaths = _glob2.default.sync(_path2.default.join(process.cwd(), `config/${appName}.{json,json5,js}`), { absolute: true });

      if (filePaths.length === 0) {
        throw new Error('Local configuration file could not be found. ' + `One of "config/${appName}.json" or "config/${appName}.js" must exist ` + 'relative to the project root.');
      } else if (filePaths.length !== 1) {
        throw new Error(`Multiple "${appName}" configuration files found. Only 1 may exist.`);
      }

      [config] = filePaths;
    }

    this.config = _extends({}, _constants.DEFAULT_TOOL_CONFIG, this.parseAndExtend(config));

    return this.config;
  }

  loadPackageJSON() {
    if (!_fs2.default.existsSync('package.json')) {
      throw new Error('Local "package.json" could not be found. ' + 'Please run the command in your project\'s root.');
    }

    this.package = _extends({}, _constants.DEFAULT_PACKAGE_CONFIG, this.parseFile('package.json'));

    return this.package;
  }

  parseAndExtend(fileOrConfig) {
    let config;

    if (typeof fileOrConfig === 'string') {
      config = this.parseFile(fileOrConfig);
    } else {
      config = fileOrConfig;
    }

    if (!(0, _isObject2.default)(config)) {
      throw new Error('Invalid configuration. Must be a plain object.');
    }

    const { extends: extendPaths } = config;

    if (!extendPaths || !extendPaths.length) {
      return config;
    }

    const nextConfig = {};
    const resolvedPaths = this.resolveExtendPaths(extendPaths);

    resolvedPaths.forEach(extendPath => {
      if (this.parsedFiles[extendPath]) {
        return;
      }

      if (!_fs2.default.existsSync(extendPath)) {
        throw new Error(`Preset configuration ${extendPath} does not exist.`);
      } else if (!_fs2.default.statSync(extendPath).isFile()) {
        throw new Error(`Preset configuration ${extendPath} must be a valid file.`);
      }

      (0, _mergeWith2.default)(nextConfig, this.parseAndExtend(extendPath), this.handleMerge);
    });

    config.extends = resolvedPaths;

    (0, _mergeWith2.default)(nextConfig, config, this.handleMerge);

    return nextConfig;
  }

  parseFile(filePath) {
    const name = _path2.default.basename(filePath);
    const ext = _path2.default.extname(filePath);
    let value;

    if (ext === '.json' || ext === '.json5') {
      value = _json2.default.parse(_fs2.default.readFileSync(filePath, 'utf8'));
    } else if (ext === '.js') {
      const context = { module: {} };

      _vm2.default.runInNewContext(_fs2.default.readFileSync(filePath, 'utf8'), context);

      value = context.module.exports;
    } else {
      throw new Error(`Unsupported configuration file format "${name}".`);
    }

    if (!(0, _isObject2.default)(value)) {
      throw new Error(`Invalid configuration file "${name}". Must return an object.`);
    }

    this.parsedFiles[filePath] = true;

    return value;
  }

  resolveExtendPaths(extendPaths) {
    return (Array.isArray(extendPaths) ? extendPaths : [extendPaths]).map(extendPath => {
      if (typeof extendPath !== 'string') {
        throw new Error('Invalid `extends` configuration value. Must be a string or an array of strings.');
      }

      if (_path2.default.isAbsolute(extendPath)) {
        return _path2.default.normalize(extendPath);
      } else if (extendPath[0] === '.') {
        return _path2.default.resolve(extendPath);
      } else if (extendPath.match(MODULE_NAME_PATTERN)) {
        return _path2.default.resolve('node_modules/', extendPath, `config/${this.appName}.preset.js`);
      } else if (extendPath.match(PLUGIN_NAME_PATTERN)) {
        return _path2.default.resolve('node_modules/', `${this.appName}-plugin-${extendPath.replace('plugin:', '')}`, `config/${this.appName}.preset.js`);
      }

      throw new Error(`Invalid \`extends\` configuration value "${extendPath}".`);
    });
  }
}
exports.default = ConfigLoader;