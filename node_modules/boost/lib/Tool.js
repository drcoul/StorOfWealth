'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _ConfigLoader = require('./ConfigLoader');

var _ConfigLoader2 = _interopRequireDefault(_ConfigLoader);

var _Renderer = require('./Renderer');

var _Renderer2 = _interopRequireDefault(_Renderer);

var _isEmptyObject = require('./helpers/isEmptyObject');

var _isEmptyObject2 = _interopRequireDefault(_isEmptyObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @copyright   2017, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 * 
 */

class Tool {

  constructor(appName, renderer) {
    this.debugs = [];
    this.debugGroups = [];

    this.appName = appName;
    this.renderer = renderer || new _Renderer2.default();
  }

  closeConsole() {
    return this;
  }

  debug(message) {
    if (this.config.debug) {
      this.debugs.push(`${_chalk2.default.blue('[debug]')} ${this.renderer.indent(this.debugGroups.length)}${message}`);
    }

    return this;
  }

  invariant(condition, message, pass, fail) {
    this.debug(`${message}: ${condition ? _chalk2.default.green(pass) : _chalk2.default.red(fail)}`);

    return this;
  }

  loadConfig() {
    if (this.package || this.config) {
      return this;
    }

    const configLoader = new _ConfigLoader2.default(this.appName);

    this.package = configLoader.loadPackageJSON();
    this.config = configLoader.loadConfig();

    return this;
  }

  loadPlugins() {
    if ((0, _isEmptyObject2.default)(this.config)) {
      throw new Error('Cannot load plugins as configuration has not been loaded.');
    }

    return this;
  }

  render() {
    return this;
  }

  startDebugGroup(group) {
    this.debug(_chalk2.default.gray(`[${group}]`));
    this.debugGroups.push(group);

    return this;
  }

  stopDebugGroup() {
    this.debugGroups.pop();

    return this;
  }
}
exports.default = Tool;